<?php

function atomic_engager_menu() {

    $items = array();
    $items['admin/config/content/atomicengager'] = array(
        'title' => 'Atomic Engager configuration',
        'description' => 'Set the API keys to make this module work.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('atomic_engager_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function atomic_engager_form($form, &$form_state) {
    $form['atomicengager_consumer'] = array(
        '#type' => 'textfield',
        '#title' => t('Consumer Keys'),
        '#default_value' => variable_get('atomicengager_consumer', ''),
        '#size' => 20,
        '#maxlength' => 90,
        '#description' => t('Please enter consumer keys from <a href="http://score.atomicreach.com" target="_blank">here</a>.'),
        '#required' => TRUE,
    );
    $form['atomicengager_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret Keys'),
        '#default_value' => variable_get('atomicengager_secret', ''),
        '#size' => 20,
        '#maxlength' => 90,
        '#description' => t('Please enter secret keys from <a href="http://score.atomicreach.com" target="_blank">here</a>.'),
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

function atomic_engager_form_alter(&$form, &$form_state, $form_id) {
// only show if viewing any Node form.
    if (isset($form['#node_edit_form'])) {
        if ($form['#node_edit_form'] == 1) {

            $form['arPost'] = array(
                '#type' => 'fieldset',
                '#title' => t('Atomic Engager'),
                '#description' => t('Click the Analyze button below to analyze your content. Make sure you select your target audience.'),
                '#weight' => -5,
                '#collapsible' => TRUE,
                '#collapsed' => FALSE,
                '#prefix' => '<div id="atomicreach">',
                '#suffix' => '</div>',
            );
            $AR = atomic_engager_api_init();
            $options = atomic_engager_get_audienceList($AR);
            $form['arPost']['araudience'] = array(
                '#type' => 'select',
                '#title' => t('Target Audience Segment '),
                '#default_value' => '',
                '#weight' => 20,
                '#options' => $options
            );

            // AJAX Stuff
            $form['arPost']['aranalyze'] = array(
                '#type' => 'button',
                //      '#src' => drupal_get_path('module', 'atomic_engager') . '/inc/images/analyze-button.png',
                '#value' => t("Analyze"),
                //  '#description' => t("Click to score this content."),
                '#prefix' => '<div id="ax">',
                '#suffix' => '</div>',
                '#weight' => 30,
                '#ajax' => array(
                    'callback' => 'atomic_engager_get_score',
                    'wrapper' => 'ax',
                    //'method' => 'after',
                    'effect' => 'fade',
                ),
            );
                        atomic_engager_add_js();


//    $segmentId = $form_state['values']['araudience'];
//    $title = $form['title']['#default_value'];
//    $content = $form['#node']->body['und']['0']['value'];
//    echo "<pre>";
//    print_r($AR->analyzePost($content, $title));
//    echo "</pre>";
        }
    }
}

function atomic_engager_api_init() {
    $apiHost = 'http://api.score.atomicreach.com';
//$apiHost = 'https://api.dev.arv3.atomicreach.com';
    $key = variable_get('atomicengager_consumer', '');
    $secret = variable_get('atomicengager_secret', '');
// check if API keys are valid and exists.
    if (isset($key) && isset($secret)) {
        if (!class_exists('AR_Client')) {
            module_load_include('inc', 'atomic_engager', 'inc/ARClient'); // adding AR_Client class
        }
        $AR = new AR_Client($apiHost, $key, $secret); // New object
        $AR->init();
        return $AR;
    }// if keys are set
}

function atomic_engager_get_audienceList($AR) {
    $audienceList = $AR->getAudienceList();
    foreach ($audienceList->sources AS $key => $source) {
        foreach ($source->segments AS $v) {
            if ($v->isPrimary == 1) {
                $pri = "*[PRIMARY]* - ";
            }
            $options[$source->name][$v->id] = $pri . $v->name;
            $pri = ''; // reset primary
        }
    }
    return $options;
}

function atomic_engager_get_score($form, $form_state) {
$commands = array();

    $segmentId = $form_state['values']['araudience'];
    $title = $form['title']['#default_value'];
    $content = $form['#node']->body['und']['0']['value'];
    if (empty($title) || empty($content)) {

        return "<div class='messages error'><h2>Content not found! Please try again.</h2></div>";
    } else {
        $AR = atomic_engager_api_init();
        return atomic_engager_display_Score($AR, $content, $title, $segmentId);
    }
}

function atomic_engager_display_Score($AR, $content, $title, $segmentId = 0) {
    $result = $AR->analyzePost($content, $title, $segmentId);

    // check API status Code
    if ($result->status != 10 && $result->status != 21) {
        $error_message = "<h2 style='color: #ff0000;'>Error!! Something went wrong! Please <a href='http://www.atomicreach.com/contact-us/'>contact us</a> with following [Status Code]:{$result->status}</h2>";
        return $error_message;
    } elseif ($result->status == 21) {
        return "<h2 style='color: #ff0000;'>AtomicReach Authentication failed! please make sure you have valid keys. For assistance please <a href='http://www.atomicreach.com/contact-us/'>contact us</a></h2>";
    } else {
        module_load_include('inc', 'atomic_engager', 'inc/meta'); // adding meta class
drupal_add_library('atomic_engager', 'atomic_engager_meta');
        drupal_add_css(drupal_get_path('module', 'atomic_engager') . '/inc/css/atomicreach.css');
        $Output = new meta($result);
        // print_r($Output);
        $score = '<h2>Content Analysis & Results:</h2>';
        $score .= $Output->displayHighlightsButtons();
        $score .= $Output->displayScore();
        $score .= '<div class="ac-container">';
        $score .= '<h3>Audience Elements</h3>';
        $score .= $Output->contentSophistication();
        $score .= $Output->contentEmotion();
        $score .= '</div><div class="ac-container">';
        $score .= '<h3>Structure Elements</h3>';
        $score .= $Output->titleOptimization();
        $score .= $Output->contentLength();
        $score .= $Output->linkCount();
        $score .= $Output->topicsTags();
        $score .= '</div><div class="ac-container">';
        $score .= '<h3>Linguistic Elements</h3>';
        $score .= $Output->spellingMistakes();
        $score .= $Output->grammarMistakes();
        $score .= $Output->contentClarity();
        // $score .= '</div><div class="ac-container">';
        $score .= '</div><div class="ac-container">';
        $score .= '<h3>Uniqueness</h3>';
        $score .= $Output->contentOriginality();
        $score .= '</div>';
        $score  .= '<div class="messages warning" style="width: 600px;"><h2>Click the Save button below to rescore this article.</h2></div>';
        return $score;
    }
}

function atomic_engager_add_js() {
    if (module_exists('wysiwyg')) {
        drupal_add_js(drupal_get_path('module', 'atomic_engager') . '/inc/js/wysiwyg-atomicreach.js');
          drupal_add_js(array('atomic_engager' => array('key' => 'value')), 'setting');
    } else {
        drupal_add_js(drupal_get_path('module', 'atomic_engager') . '/inc/js/atomicreach.js');
    }
    drupal_add_js(drupal_get_path('module', 'atomic_engager') . '/inc/js/ar-highlight.js');
}


/**
 * Implementation of hook_wywiwyg_plugin().
 */
function atomic_engager_wysiwyg_plugin($editor, $version = 0) {
    switch ($editor) {
        case 'tinymce':
            if (version_compare($version, 3, '>=') && version_compare($version, 4, '<')) {
                return array(
                    'customDictionaryContextMenu' => array(
                        // A URL to the plugin's homepage, optional.
                        'url' => 'http://www.atomicreach.com/',
                        // The full path to the native editor plugin, no trailing slash.
                        // Ignored when 'internal' is set to TRUE below.
                        //'path' => wysiwyg_get_path('tinymce_plugins', TRUE) . '/myplugin',
                        'path' => drupal_get_path('module', 'atomic_engager') . '/inc/customDictionaryContextMenu/editor_plugin.js',
                        // A list of editor extensions provided by this native plugin.
                        // Extensions are not displayed as buttons and touch the editor's
                        // internals, so you should know what you are doing.
                        'extensions' => array(
                            'internal_name_of_myplugin' => t('Atomic Engager Custom Dictionary'),
                        ),
                        // Boolean whether the editor needs to load this plugin. When TRUE,
                        // the editor will automatically load the plugin based on the 'path'
                        // variable provided. If FALSE, the plugin either does not need to
                        // be loaded or is already loaded by something else on the page.
                        // Most plugins should define TRUE here.
                        'load' => TRUE,
                        // Boolean whether this plugin is a native plugin, i.e. shipped with
                        // the editor. Definition must be ommitted for plugins provided by
                        // other modules. TRUE means 'path' and 'filename' above are ignored
                        // and the plugin is instead loaded from the editor's plugin folder.
                        'internal' => FALSE,
                    ),
                );
            }
            break;
    }
}

define('IS_AJAX_REQUEST', isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest');
if (IS_AJAX_REQUEST && $_GET['word']) {
    atomic_engager_custom_dictionary();
}

function atomic_engager_custom_dictionary() {
    $success = false;
    $word = $_GET['word'];
    if ($word) {
        module_load_include('inc', 'atomic_engager', 'inc/ARClient');
        $apiHost = 'http://api.score.atomicreach.com';
        $key = variable_get('atomicengager_consumer', '');
        $secret = variable_get('atomicengager_secret', '');
        $apiClient = New AR_Client($apiHost, $key, $secret);
        $apiClient->init();
        $result = $apiClient->addDictionary($word);

        if ($result->status == AR_Client::STATUS_OK) {
            $success = true;
        }
    }

    echo $success ? 'OK' : 'ERROR';
    exit();
}